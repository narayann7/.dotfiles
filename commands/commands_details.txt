cat filename
cat file1 file2 
cat file1 file2 > newcombinedfile
cat < file1 > file2 #copy file1 to file2

chmod 
https://ss64.com/bash/chmod.html

----------------------------------------------------------------------------------

cut 
{

https://www.geeksforgeeks.org/cut-command-linux-examples/


t.txt ->  hello 
world
good
code

cut -b 1 t.txt 

h
w
g
c

cut -b 1-2,4-5 t.txt

1-2 will b the  substring

hello   -b 1,3,5  ->  hlo
-b 1-2,5  ->  heo
-b 3-     ->  lo
-b -3     ->  he


hello world i am learning bash scripting        

cut -d " " -f 2 t.txt -> world 
cut -d " " -f 5 t.txt -> learning
cut -d " " -f 1-3 t.txt -> hello world i




}
----------------------------------------------------------------------------------

string
{

${parameter/pattern/string}

ex----

str="hello my name narayan"

ip -> echo ${str// /-}   

op -> hello-my-name-narayan

// <- double slash will replace all pattern with give string

name="John"
echo ${name}
echo ${name/J/j}    #=> "john" (substitution)
echo ${name:0:2}    #=> "Jo" (slicing)
echo ${name::2}     #=> "Jo" (slicing)
echo ${name::-1}    #=> "Joh" (slicing)
echo ${name:(-1)}   #=> "n" (slicing from right)
echo ${name:(-2):1} #=> "h" (slicing from right)
echo ${food:-Cake}  #=> $food or "Cake"

${FOO%suffix}    	Remove suffix
${FOO#prefix} 	    Remove prefix
${FOO%%suffix} 	    Remove long suffix
${FOO##prefix} 	    Remove long prefix
${FOO/from/to} 	    Replace first match
${FOO//from/to} 	Replace all
${FOO/%from/to} 	Replace suffix
${FOO/#from/to} 	Replace prefix


}
----------------------------------------------------------------------------------

files
{


[[ -e FILE ]] 	Exists
[[ -r FILE ]] 	Readable
[[ -h FILE ]] 	Symlink
[[ -d FILE ]] 	Directory
[[ -w FILE ]] 	Writable
[[ -s FILE ]] 	Size is > 0 bytes
[[ -f FILE ]] 	File
[[ -x FILE ]] 	Executable
[[ FILE1 -nt FILE2 ]] 	1 is more recent than 2
[[ FILE1 -ot FILE2 ]] 	2 is more recent than 1
[[ FILE1 -ef FILE2 ]] 	Same files


}


conditions
{

[[ -z STRING ]] 	Empty string
[[ -n STRING ]] 	Not empty string
[[ STRING == STRING ]] 	Equal
[[ STRING != STRING ]] 	Not Equal
[[ NUM -eq NUM ]] 	Equal
[[ NUM -ne NUM ]] 	Not equal
[[ NUM -lt NUM ]] 	Less than
[[ NUM -le NUM ]] 	Less than or equal
[[ NUM -gt NUM ]] 	Greater than
[[ NUM -ge NUM ]] 	Greater than or equal
[[ STRING =~ STRING ]] 	Regexp
(( NUM < NUM )) 	Numeric conditions
More conditions
[[ -o noclobber ]] 	If OPTIONNAME is enabled
[[ ! EXPR ]] 	Not
[[ X && Y ]] 	And
[[ X || Y ]] 	Or

}